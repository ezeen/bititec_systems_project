# .github/workflows/deploy.yml

name: CI/CD for BITTLECSYSTEM

# Trigger on pushes/PRs to main in backend/ or emailserver/ (adjust paths if needed)
on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'emailserver/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'emailserver/**'

jobs:
  test:
    name: Run Django Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django tests
        working-directory: backend
        env:
          # Point Django at the PostgreSQL test service
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          SECRET_KEY: test-secret
          DEBUG: 'True'
        run: |
          python manage.py migrate
          python manage.py test

  deploy:
    name: Deploy to Production Server
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: SSH & Deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # 1. Go to project root on the server
            cd ${{ secrets.SERVER_PATH }}

            # 2. Pull latest changes
            git pull origin main

            # 3. Load environment variables
            source /home/bititec_server/shared/scripts/load_env.sh

            # 4. Navigate to shared (where docker-compose.yml lives)
            cd shared

            # 5. Stop the backend & emailserver containers
            docker-compose stop backend_bititecsystems emailserver_bititecsystems

            # 6. Rebuild with no cache
            docker-compose build --no-cache backend_bititecsystems emailserver_bititecsystems

            # 7. Start services
            docker-compose up -d backend_bititecsystems emailserver_bititecsystems

            # 8. Give containers time to start
            sleep 30

            # 9. Apply Django migrations
            docker-compose exec -T backend_bititecsystems python manage.py migrate

            # 10. Collect static files
            docker-compose exec -T backend_bititecsystems python manage.py collectstatic --noinput

            # 11. Restart nginx to pick up any changes
            docker-compose restart nginx

            # 12. Optional: Check status
            docker-compose ps
        env:
          # Make sure SSH client does not prompt
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      # :contentReference[oaicite:24]{index=24}

 # ──────────── 2. Build and Deploy Frontend to Firebase ────────────
  deploy-frontend:
    name: Build & Deploy React Frontend to Firebase
    runs-on: ubuntu-latest
    needs: test-backend
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend dependencies
        working-directory: frontend
        run: |
          npm ci

      - name: Run React build
        working-directory: frontend
        run: |
          npm run build

      - name: Deploy to Firebase Hosting
        working-directory: frontend
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_BITITECSYSTEM. }}
        run: |
          npx firebase deploy --only hosting
